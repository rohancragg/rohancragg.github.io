{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 rohancragg's Personal Tech Docs \u00b6 This repository contains hopelessly hopeful drafts of blog articles and other bobbins and gubbins I want to make sure I don't forget. One day I'll maybe even host these at https://www.rohancragg.co.uk - stranger things have happened ;-) Created with MkDocs and Material theme by squidfunk","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#rohancraggs-personal-tech-docs","text":"This repository contains hopelessly hopeful drafts of blog articles and other bobbins and gubbins I want to make sure I don't forget. One day I'll maybe even host these at https://www.rohancragg.co.uk - stranger things have happened ;-) Created with MkDocs and Material theme by squidfunk","title":"rohancragg's Personal Tech Docs"},{"location":"about/","text":"About Me \u00b6 Home page - rohancragg.co.uk StackExchange Profile:","title":"About Me"},{"location":"about/#about-me","text":"Home page - rohancragg.co.uk StackExchange Profile:","title":"About Me"},{"location":"aks/create-tls-secret/","text":"How to Create a TLS Secret \u00b6 I followed the command-line method (the first method) explained in this article Creating Kubernetes Secrets Using TLS/SSL as an Example - i.e. rather than using the second (YAML file) method. In order to do this I needed two files in the correct format. There are multiple formats that certificate and associated key files can be in (they can even be combined into a single file). In order to create a Kubernetes TLS secret I needed to ascertain the right ones to use. I was provided with a .pks file and needed to work out how to generate the correct artifacts from it. All I knew from the above article was that I needed a .crt and a .key file and at first I wasn't sure what these were. What are we trying to achieve? \u00b6 I needed obtain a TLS certificate and create a TLS Secret object in Kubernetes so that an Ingress resource could refer to the Secret in order that the certificate presented by the NGINX Ingress would look like this when visiting the associated Service in a web browser: (i.e. the TLS/HTTPS certificate should include the CA chain.) Getting the right files \u00b6 To get an encrypted private key: openssl pkcs12 -in domain.pfx -nocerts -out domain.enc.key To get an un-encrypted private key file openssl rsa -in domain.enc.key -outform PEM -out domain.key Note: be sure to delete this file once uploaded to the cluster so that you don't have an un-encrypted secret on your local machine To get the certificate file openssl pkcs12 -in domain.pfx -nodes -nokeys -nomac -out domain.crt The domain.crt file looks like this In my case it contains the full CA chain and so, in my case, there are three certificates each enclosed in BEGIN CERTIFICATE and END CERTIFICATE delimiters: -----BEGIN CERTIFICATE----- # ############################################################### # ############################################################### -----END CERTIFICATE----- Creating the TLS Secret in Kubernetes \u00b6 Create Kubernetes TLS Secret: kubectl create secret tls tlscert --key=\"tls.key\" --cert=\"tls.crt\" Additional Notes \u00b6 How to validate a key \u00b6 This works for both encrypted or un-encrypted keys : openssl rsa -check -in domain.enc.key or openssl rsa -check -in domain.key You should see the message 'RSA key ok': $ openssl rsa -check -in domain.enc.key Enter pass phrase for domain.enc.pem: RSA key ok writing RSA key -----BEGIN RSA PRIVATE KEY----- # ############################################################### # ############################################################### Where did my PKS file come from? \u00b6 I was provided with a .pks ( PKCS#12 ) file which had been created with the following command openssl pkcs12 -export -out domain.pfx -inkey domain.rsa -in domain.cer -certfile CAbundle.txt Where: domain.cer is the client certificate (i.e. without the Certification Authority (CA) chain ) domain.rsa is an un-encrypted version of the private key CAbundle.txt contains the CA certificates to append to create the CA chain domain.cer looks like this As you can see if contains just a single certificate domain.rsa looks like this How to get the client certificate (without the full CA chain) \u00b6 openssl pkcs12 -in domain.pfx -clcerts -nokeys -out domain.cer Some of the steps in this article are based on How to convert a PFX to a seperate .key/.crt file - by Mark Brilman I also referred to the OpenSSL PKCS12 man pages And to OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs","title":"Create a TLS Secret"},{"location":"aks/create-tls-secret/#how-to-create-a-tls-secret","text":"I followed the command-line method (the first method) explained in this article Creating Kubernetes Secrets Using TLS/SSL as an Example - i.e. rather than using the second (YAML file) method. In order to do this I needed two files in the correct format. There are multiple formats that certificate and associated key files can be in (they can even be combined into a single file). In order to create a Kubernetes TLS secret I needed to ascertain the right ones to use. I was provided with a .pks file and needed to work out how to generate the correct artifacts from it. All I knew from the above article was that I needed a .crt and a .key file and at first I wasn't sure what these were.","title":"How to Create a TLS Secret"},{"location":"aks/create-tls-secret/#what-are-we-trying-to-achieve","text":"I needed obtain a TLS certificate and create a TLS Secret object in Kubernetes so that an Ingress resource could refer to the Secret in order that the certificate presented by the NGINX Ingress would look like this when visiting the associated Service in a web browser: (i.e. the TLS/HTTPS certificate should include the CA chain.)","title":"What are we trying to achieve?"},{"location":"aks/create-tls-secret/#getting-the-right-files","text":"To get an encrypted private key: openssl pkcs12 -in domain.pfx -nocerts -out domain.enc.key To get an un-encrypted private key file openssl rsa -in domain.enc.key -outform PEM -out domain.key Note: be sure to delete this file once uploaded to the cluster so that you don't have an un-encrypted secret on your local machine To get the certificate file openssl pkcs12 -in domain.pfx -nodes -nokeys -nomac -out domain.crt The domain.crt file looks like this In my case it contains the full CA chain and so, in my case, there are three certificates each enclosed in BEGIN CERTIFICATE and END CERTIFICATE delimiters: -----BEGIN CERTIFICATE----- # ############################################################### # ############################################################### -----END CERTIFICATE-----","title":"Getting the right files"},{"location":"aks/create-tls-secret/#creating-the-tls-secret-in-kubernetes","text":"Create Kubernetes TLS Secret: kubectl create secret tls tlscert --key=\"tls.key\" --cert=\"tls.crt\"","title":"Creating the TLS Secret in Kubernetes"},{"location":"aks/create-tls-secret/#additional-notes","text":"","title":"Additional Notes"},{"location":"aks/create-tls-secret/#how-to-validate-a-key","text":"This works for both encrypted or un-encrypted keys : openssl rsa -check -in domain.enc.key or openssl rsa -check -in domain.key You should see the message 'RSA key ok': $ openssl rsa -check -in domain.enc.key Enter pass phrase for domain.enc.pem: RSA key ok writing RSA key -----BEGIN RSA PRIVATE KEY----- # ############################################################### # ###############################################################","title":"How to validate a key"},{"location":"aks/create-tls-secret/#where-did-my-pks-file-come-from","text":"I was provided with a .pks ( PKCS#12 ) file which had been created with the following command openssl pkcs12 -export -out domain.pfx -inkey domain.rsa -in domain.cer -certfile CAbundle.txt Where: domain.cer is the client certificate (i.e. without the Certification Authority (CA) chain ) domain.rsa is an un-encrypted version of the private key CAbundle.txt contains the CA certificates to append to create the CA chain domain.cer looks like this As you can see if contains just a single certificate domain.rsa looks like this","title":"Where did my PKS file come from?"},{"location":"aks/create-tls-secret/#how-to-get-the-client-certificate-without-the-full-ca-chain","text":"openssl pkcs12 -in domain.pfx -clcerts -nokeys -out domain.cer Some of the steps in this article are based on How to convert a PFX to a seperate .key/.crt file - by Mark Brilman I also referred to the OpenSSL PKCS12 man pages And to OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs","title":"How to get the client certificate (without the full CA chain)"},{"location":"aks/domains/","text":"Clusters of Domains - designing domains and DNS for AKS \u00b6 This page outlines what I've discovered to date about how to combine a Domain Name delegation, and Azure DNS service to provide a domain name for AKS cluster Ingress Note Draft - the plan is to flesh this out a bit more: https://jwendl.net/code-notes/azure/network/","title":"Clusters and Domains"},{"location":"aks/domains/#clusters-of-domains-designing-domains-and-dns-for-aks","text":"This page outlines what I've discovered to date about how to combine a Domain Name delegation, and Azure DNS service to provide a domain name for AKS cluster Ingress Note Draft - the plan is to flesh this out a bit more: https://jwendl.net/code-notes/azure/network/","title":"Clusters of Domains - designing domains and DNS for AKS"},{"location":"misc/scoop/","text":"The 'Scoop' on my personal machine build \u00b6 This page describes how I'm current -ly using Scoop (and other Package Managers) to configure my system The Daddy... Scoop ! \u00b6 Get scoop.sh and check out the wiki for latest info - or see below for the TL;DR Scoop focuses on open-source, command-line developer tools\" but then those are the kinds of tools I'm using more and more... ...You're familiar with UNIX tools, and you wish there were more of them on Windows from: https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison Install Scoop and base set of tools \u00b6 Invoke-Expression ( New-Object System . Net . WebClient ). DownloadString ( 'https://get.scoop.sh' ) scoop install sudo sudo scoop install 7zip git - -global scoop install curl grep sed less touch nano scoop install coreutils scoop install nodejs Tip you can to use the Unix tool ls after installing coreutils but you first need to remove the PowerShell alias already in place\\ i.e. add this to your Powershell $profile : # remove aliases for coreutils Remove-Alias -Name ls Remove-Alias -Name cat Remove-Alias -Name mv Remove-Alias -Name ps Remove-Alias -Name pwd Remove-Alias -Name rm #Remove-Alias -Name sort #Remove-Alias -Name tee #Remove-Alias -Name touch Buckets \u00b6 Then, I add additional Buckets . Buckets are collections of apps which are additional / optional to the main bucket scoop bucket add extras scoop bucket add main scoop bucket add versions Then yet more handy tools I use: scoop install azure-cli dotnet-sdk go hugo # from extras bucket: scoop install vcredist2019 linqpad notepadplusplus paint . net windows-terminal Info Other useful (possibly useful?) buckets that I've not yet had a use for: nonportable - non-portable Applications that need to retain state between versions full list of known buckets Paths \u00b6 Referencing the path to an application installed by Scoop %UserProfile%/scoop/apps Note Those installed with the --global (and with the sudo command) will reside in the path %ProgramData%/scoop/apps For each version of an application the files will be in a directory with the version number, but Scoop creates a Shim for the current version in the path %UserProfile%\\scoop\\apps\\{AppName}\\current . For example: the path to Python ( python.exe ) will be either: %UserProfile%\\scoop\\apps\\python\\3.8.1\\python.exe or: %UserProfile%\\scoop\\apps\\python\\current\\python.exe For system tools you'll probably want to user the current shim to avoid those tools breaking between updates. Specifying Application Versions \u00b6 The versions bucket contains a way to obtain versions other than the latest version of an application. This is used in combination with scoop reset command to switch between versions of an app. Scoop creates a shim for each version and scoop reset switches the current shim between those versions. For example: Switching-Ruby-And-Python-Versions Common Pre-Requisites \u00b6 The following is a set of common pre-requisites for installing tools and utilitied (e.g. the pip package manager for python tools): Python and PIP \u00b6 scoop install python scoop install curl curl https : // bootstrap . pypa . io / get-pip . py -o get-pip . py python get-pip . py python -m pip install -U pip System Fonts \u00b6 Here's another place where Scoop comes to the rescue to avoid clunky download and installs for system fonts! Info note how sudo is being used to install the font as a global / system font - this obvisouly pops up a UAC prompt as it requires elevated provilege to install a system font... scoop bucket add nerd-fonts sudo scoop install Delugia-Nerd-Font-Complete Productivity Tools \u00b6 MkDocs \u00b6 MkDocs \"Project documentation with Markdown\" I use this for writing this site! : pip install mkdocs python .\\ scoop \\ apps \\ python \\ current \\ Tools \\ scripts \\ win_add2path . py Install the Custom Theme \u00b6 Using Material theme and dependencies for CodeHilite pip install mkdocs-material pip install pygments # for source code syntax highlighting","title":"Scoop & Co"},{"location":"misc/scoop/#the-scoop-on-my-personal-machine-build","text":"This page describes how I'm current -ly using Scoop (and other Package Managers) to configure my system","title":"The 'Scoop' on my personal machine build"},{"location":"misc/scoop/#the-daddy-scoop","text":"Get scoop.sh and check out the wiki for latest info - or see below for the TL;DR Scoop focuses on open-source, command-line developer tools\" but then those are the kinds of tools I'm using more and more... ...You're familiar with UNIX tools, and you wish there were more of them on Windows from: https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison","title":"The Daddy... Scoop!"},{"location":"misc/scoop/#install-scoop-and-base-set-of-tools","text":"Invoke-Expression ( New-Object System . Net . WebClient ). DownloadString ( 'https://get.scoop.sh' ) scoop install sudo sudo scoop install 7zip git - -global scoop install curl grep sed less touch nano scoop install coreutils scoop install nodejs Tip you can to use the Unix tool ls after installing coreutils but you first need to remove the PowerShell alias already in place\\ i.e. add this to your Powershell $profile : # remove aliases for coreutils Remove-Alias -Name ls Remove-Alias -Name cat Remove-Alias -Name mv Remove-Alias -Name ps Remove-Alias -Name pwd Remove-Alias -Name rm #Remove-Alias -Name sort #Remove-Alias -Name tee #Remove-Alias -Name touch","title":"Install Scoop and base set of tools"},{"location":"misc/scoop/#buckets","text":"Then, I add additional Buckets . Buckets are collections of apps which are additional / optional to the main bucket scoop bucket add extras scoop bucket add main scoop bucket add versions Then yet more handy tools I use: scoop install azure-cli dotnet-sdk go hugo # from extras bucket: scoop install vcredist2019 linqpad notepadplusplus paint . net windows-terminal Info Other useful (possibly useful?) buckets that I've not yet had a use for: nonportable - non-portable Applications that need to retain state between versions full list of known buckets","title":"Buckets"},{"location":"misc/scoop/#paths","text":"Referencing the path to an application installed by Scoop %UserProfile%/scoop/apps Note Those installed with the --global (and with the sudo command) will reside in the path %ProgramData%/scoop/apps For each version of an application the files will be in a directory with the version number, but Scoop creates a Shim for the current version in the path %UserProfile%\\scoop\\apps\\{AppName}\\current . For example: the path to Python ( python.exe ) will be either: %UserProfile%\\scoop\\apps\\python\\3.8.1\\python.exe or: %UserProfile%\\scoop\\apps\\python\\current\\python.exe For system tools you'll probably want to user the current shim to avoid those tools breaking between updates.","title":"Paths"},{"location":"misc/scoop/#specifying-application-versions","text":"The versions bucket contains a way to obtain versions other than the latest version of an application. This is used in combination with scoop reset command to switch between versions of an app. Scoop creates a shim for each version and scoop reset switches the current shim between those versions. For example: Switching-Ruby-And-Python-Versions","title":"Specifying Application Versions"},{"location":"misc/scoop/#common-pre-requisites","text":"The following is a set of common pre-requisites for installing tools and utilitied (e.g. the pip package manager for python tools):","title":"Common Pre-Requisites"},{"location":"misc/scoop/#python-and-pip","text":"scoop install python scoop install curl curl https : // bootstrap . pypa . io / get-pip . py -o get-pip . py python get-pip . py python -m pip install -U pip","title":"Python and PIP"},{"location":"misc/scoop/#system-fonts","text":"Here's another place where Scoop comes to the rescue to avoid clunky download and installs for system fonts! Info note how sudo is being used to install the font as a global / system font - this obvisouly pops up a UAC prompt as it requires elevated provilege to install a system font... scoop bucket add nerd-fonts sudo scoop install Delugia-Nerd-Font-Complete","title":"System Fonts"},{"location":"misc/scoop/#productivity-tools","text":"","title":"Productivity Tools"},{"location":"misc/scoop/#mkdocs","text":"MkDocs \"Project documentation with Markdown\" I use this for writing this site! : pip install mkdocs python .\\ scoop \\ apps \\ python \\ current \\ Tools \\ scripts \\ win_add2path . py","title":"MkDocs"},{"location":"misc/scoop/#install-the-custom-theme","text":"Using Material theme and dependencies for CodeHilite pip install mkdocs-material pip install pygments # for source code syntax highlighting","title":"Install the Custom Theme"}]}